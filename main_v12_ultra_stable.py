from src.rl.agent import Agent
from src.rl.env import Env
from src.stock.stock import Stock
from main_v11_honest import test_oos_honest, test_oos_comprehensive
import numpy as np
import os


def main():
    """v12: –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –º–æ–¥–µ–ª—å —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é"""
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    model_name = "google-trading-v12-ultra-stable"
    
    print("üîí –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –ê–¢–ê–ö–ê: Google trading bot v12!")
    print("üéØ –§–û–ö–£–°: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å!")
    print("üìä –ê–ù–ê–õ–ò–ó –ø—Ä–æ–±–ª–µ–º v11:")
    print("   ‚ö†Ô∏è –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: –º–Ω–æ–≥–æ OOS $0")
    print("   ‚ö†Ô∏è –í—ã—Å–æ–∫–∏–π epsilon: 0.49-0.50 –≤–º–µ—Å—Ç–æ 0.01")
    print("   ‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    print("")
    print("üîß –£–õ–£–ß–®–ï–ù–ò–Ø v12:")
    print("   ‚úÖ –ö–†–ê–ô–ù–ï –Ω–∏–∑–∫–∏–π epsilon: 0.001 —Ñ–∏–Ω–∞–ª—å–Ω—ã–π")
    print("   ‚úÖ –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –º–µ–Ω—å—à–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("   ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –æ—á–µ–Ω—å –Ω–∏–∑–∫–∏–π LR")
    print("   ‚úÖ –§–æ–∫—É—Å –Ω–∞ consistency >80%")
    print("=" * 70)
    
    # –£–õ–¨–¢–†–ê-–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    training_episodes = 150    # –ö–æ—Ä–æ—á–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
    trading_period = 60       # –ö–û–†–û–ß–ï –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏  
    window_size = 30          # –ú–ï–ù–¨–®–ï –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    fee = 0.0002             # –¢–∞ –∂–µ –∫–æ–º–∏—Å—Å–∏—è
    
    # –î–∞–Ω–Ω—ã–µ
    train_csv = "GOOG_2010-2024-06.csv"
    oos_csv = "GOOG_2024-07_2025-04.csv"
    
    print(f"üìä –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã v12:")
    print(f"üìà –≠–ø–∏–∑–æ–¥—ã: {training_episodes} (–∫–æ—Ä–æ—Ç–∫–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞)")
    print(f"‚è∞ –ü–µ—Ä–∏–æ–¥: {trading_period} –¥–Ω–µ–π (–∫–æ—Ä–æ—á–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)")
    print(f"ü™ü –û–∫–Ω–æ: {window_size} –¥–Ω–µ–π (–º–µ–Ω—å—à–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)")
    print(f"üí∞ –ö–æ–º–∏—Å—Å–∏—è: {fee*100}%")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
    train_env = Env(csv_paths=[train_csv], fee=fee, trading_period=trading_period, window=window_size)
    oos_env = Env(csv_paths=[oos_csv], fee=fee, trading_period=trading_period, window=window_size)
    
    # –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï —Ü–µ–ª–∏
    train_env.target_profit = 200     # –ù–ò–ó–ö–ê–Ø —Ü–µ–ª—å –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    train_env.max_trades_per_episode = 8    # –ú–ê–õ–û —Å–¥–µ–ª–æ–∫
    train_env.min_trades_per_episode = 2    # –ú–∏–Ω–∏–º—É–º
    
    print(f"üìä –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–û–ï –æ–∫—Ä—É–∂–µ–Ω–∏–µ v12:")
    print(f"   Observation space: {train_env.stock.obs_space.shape}")
    print(f"   Target profit: ${train_env.target_profit} (–Ω–∏–∑–∫–∞—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏)")
    print(f"   Trading range: {train_env.min_trades_per_episode}-{train_env.max_trades_per_episode} —Å–¥–µ–ª–æ–∫")
    
    # –£–õ–¨–¢–†–ê-–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è v12
    model_config = {
        'embeddings': 16,      # –ú–ê–õ–û - –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        'heads': 1,            # –û–î–ò–ù head - –ø—Ä–æ—Å—Ç–æ—Ç–∞
        'layers': 1,           # –û–î–ò–ù —Å–ª–æ–π - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å—Ç–æ—Ç–∞
        'fwex': 64,           # –ú–ê–õ–û
        'dropout': 0.01,      # –ö–†–ê–ô–ù–ï –Ω–∏–∑–∫–∏–π –¥–ª—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º–∞
        'neurons': 64,        # –ú–ê–õ–û
        'lr': 0.0005,         # –ö–†–ê–ô–ù–ï –Ω–∏–∑–∫–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        'epsilon': 0.5,       # –ù–∞—á–∏–Ω–∞–µ–º —É–º–µ—Ä–µ–Ω–Ω–æ
        'epsilon_min': 0.001, # –ö–†–ê–ô–ù–ï –Ω–∏–∑–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
        'epsilon_decay': 0.99, # –ë–´–°–¢–†–´–ô decay –∫ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏–∑–º—É
        'gamma': 0.9,         # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
        'memory_size': 2000,  # –ú–ê–õ–û –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        'batch_size': 128,    # –£–ú–ï–†–ï–ù–ù–û
        'update_freq': 10     # –†–ï–î–ö–û –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    }
    
    print(f"====== –£–õ–¨–¢–†–ê-–ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–ê–Ø –º–æ–¥–µ–ª—å v12: {model_name} ======")
    print("üîí –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏:")
    for key, value in model_config.items():
        print(f"  {key}: {value}")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ v12
    agent = Agent(obs_space=train_env.stock.obs_space, **model_config)
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_file = f"models/{model_name}.log"
    
    print(f"üîí –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ v12...")
    print(f"üéØ –¶–ï–õ–¨: Consistency >80% –ø—Ä–∏ —É–º–µ—Ä–µ–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏!")
    
    # –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    print("üì¶ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏...")
    initial_memory_size = model_config['memory_size'] // 5  # –ï—â—ë –º–µ–Ω—å—à–µ
    
    attempts = 0
    step_count = 0
    while len(agent.memory) < initial_memory_size and attempts < 30:
        if step_count % 50 == 0:
            state = train_env.reset()
        else:
            action = agent.act(state, training=True)
            next_state, _, reward, done = train_env.step(action)
            agent.remember(state, action, reward, next_state, done)
            state = next_state
            step_count += 1
        attempts += 1
    
    print(f"‚úÖ –ü–∞–º—è—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞: {len(agent.memory)} –∑–∞–ø–∏—Å–µ–π")
    
    # –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ô —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è v12
    header = "episode,train_profit,oos_profit_fixed,oos_profit_median,oos_profit_mean,oos_win_rate,oos_consistency,train_trades,oos_trades,train_win_rate,train_sharpe,oos_sharpe,loss,epsilon"
    with open(log_file, "w") as f:
        f.write(header + "\n")
    
    best_consistency = 0
    best_model_episode = 0
    stable_results_count = 0
    
    # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    target_consistency = 0.8  # 80% consistency
    target_median_profit = 30  # –°–∫—Ä–æ–º–Ω–∞—è –Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ü–µ–ª—å
    
    try:
        for episode in range(training_episodes):
            # –û–±—É—á–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –Ω–∞ train –¥–∞–Ω–Ω—ã—Ö
            state = train_env.reset()
            done = False
            episode_loss = 0.0
            loss_count = 0
            
            while not done:
                action = agent.act(state, training=True)
                next_state, _, reward, done = train_env.step(action)
                agent.remember(state, action, reward, next_state, done)
                
                # –†–µ–¥–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                if len(agent.memory) > model_config['batch_size'] and step_count % model_config['update_freq'] == 0:
                    loss = agent.update()
                    if loss > 0:
                        episode_loss += loss
                        loss_count += 1
                
                state = next_state
                step_count += 1
            
            # –ú–µ—Ç—Ä–∏–∫–∏ train
            train_metrics = train_env.get_trading_metrics()
            avg_loss = episode_loss / max(loss_count, 1)
            
            # –ß–ï–°–¢–ù–û–ï OOS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–æ –º–µ–Ω—å—à–µ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ—Ç—ã)
            oos_results = test_oos_fast(agent, oos_env)
            
            # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            if (oos_results['median_profit'] >= target_median_profit and 
                oos_results['consistency'] >= target_consistency):
                stable_results_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å –ø–æ CONSISTENCY
            if oos_results['consistency'] > best_consistency:
                best_consistency = oos_results['consistency']
                best_model_episode = episode
                agent.save(f"models/{model_name}_best")
                print(f"üîí –ù–æ–≤–∞—è –ª—É—á—à–∞—è consistency: {oos_results['consistency']*100:.1f}% (—ç–ø–∏–∑–æ–¥ {episode})")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_line = f"{episode},{train_metrics['total_profit_dollars']:.2f},{oos_results['fixed_profit']:.2f},"
            log_line += f"{oos_results['median_profit']:.2f},{oos_results['mean_profit']:.2f},"
            log_line += f"{oos_results['win_rate']:.3f},{oos_results['consistency']:.3f},"
            log_line += f"{train_metrics['num_trades']},{oos_results['avg_trades']:.1f},"
            log_line += f"{train_metrics['win_rate']:.3f},{train_metrics['sharpe_ratio']:.3f},"
            log_line += f"{oos_results['sharpe']:.3f},{avg_loss:.6f},{agent.epsilon:.3f}"
            
            with open(log_file, "a") as f:
                f.write(log_line + "\n")
            
            # –í—ã–≤–æ–¥ –∫–∞–∂–¥—ã–µ 15 —ç–ø–∏–∑–æ–¥–æ–≤
            if episode % 15 == 0:
                stability_rate = stable_results_count / (episode + 1) * 100
                print(f"Ep: {episode} | Train: ${train_metrics['total_profit_dollars']:.0f} | "
                      f"OOS Med: ${oos_results['median_profit']:.0f}")
                print(f"    Consistency: {oos_results['consistency']*100:.1f}% | "
                      f"Epsilon: {agent.epsilon:.3f} | Stability: {stability_rate:.1f}%")
                print(f"    Best consistency: {best_consistency*100:.1f}%")
                print("-" * 60)
            
            # Early stopping –Ω–∞ —É–ª—å—Ç—Ä–∞-—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if episode >= 50:
                recent_stability = stable_results_count / episode
                if recent_stability >= 0.9:  # 90% —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    print(f"üîí –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê! Stopping at episode {episode}")
                    break
    
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û–±—É—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
    agent.save(f"models/{model_name}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüîí –§–ò–ù–ê–õ–¨–ù–ê–Ø –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
    final_oos = test_oos_comprehensive(agent, oos_env, detailed=True)
    
    print(f"\n‚úÖ –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–û–ï –æ–±—É—á–µ–Ω–∏–µ v12 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/{model_name}")
    print(f"üîí –õ—É—á—à–∞—è consistency: models/{model_name}_best (—ç–ø–∏–∑–æ–¥ {best_model_episode})")
    print(f"üìä –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    print(f"üéØ –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {stable_results_count}/{episode+1} ({stable_results_count/(episode+1)*100:.1f}%)")
    
    # –û—Ü–µ–Ω–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüìà –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ú–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${final_oos['median_profit']:.2f}")
    print(f"   Consistency: {final_oos['consistency']*100:.1f}%")
    print(f"   Win rate: {final_oos['win_rate']*100:.1f}%")
    print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${final_oos['std_profit']:.2f}")
    
    # –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞ –ø–æ –Ω–æ–≤—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    if final_oos['consistency'] >= 0.8 and final_oos['median_profit'] >= 30:
        print(f"üîí –£–õ–¨–¢–†–ê-–°–¢–ê–ë–ò–õ–¨–ù–´–ô –£–°–ü–ï–•! –í—ã—Å–æ–∫–∞—è consistency –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç!")
    elif final_oos['consistency'] >= 0.7:
        print(f"üìà –•–û–†–û–®–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨! –î–≤–∏–∂–µ–º—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏!")
    elif final_oos['consistency'] >= 0.5:
        print(f"‚ö†Ô∏è –£–ú–ï–†–ï–ù–ù–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨! –ù—É–∂–Ω–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!")
    else:
        print(f"‚ùå –ù–ò–ó–ö–ê–Ø –°–¢–ê–ë–ò–õ–¨–ù–û–°–¢–¨! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä –ø–æ–¥—Ö–æ–¥–∞!")


def test_oos_fast(agent, oos_env):
    """–ë—ã—Å—Ç—Ä–æ–µ OOS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –º–µ–Ω—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–∑–∏—Ü–∏–π"""
    results = []
    max_starts = len(oos_env.stock.closes) - oos_env.trading_period - 10
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –∫–∞–∂–¥–æ–π 10-–π –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    test_positions = list(range(0, max_starts, 10))
    
    for start_pos in test_positions:
        metrics = test_oos_honest(agent, oos_env, start_position=start_pos)
        results.append({
            'profit': metrics['total_profit_dollars'],
            'trades': metrics['num_trades'],
            'win_rate': metrics['win_rate'],
            'sharpe': metrics['sharpe_ratio']
        })
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    profits = [r['profit'] for r in results]
    trades = [r['trades'] for r in results]
    win_rates = [r['win_rate'] for r in results]
    sharpes = [r['sharpe'] for r in results]
    
    return {
        'fixed_profit': profits[0] if profits else 0,
        'mean_profit': np.mean(profits),
        'median_profit': np.median(profits), 
        'std_profit': np.std(profits),
        'win_rate': np.mean(win_rates),
        'consistency': len([p for p in profits if p > 0]) / len(profits),
        'sharpe': np.mean(sharpes),
        'avg_trades': np.mean(trades),
        'total_tests': len(results)
    }


if __name__ == "__main__":
    main() 