#!/usr/bin/env python3
"""
üöÄüöÄüöÄ –ë–û–õ–¨–®–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–† –° TQDM! üöÄüöÄüöÄ
üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ 4 –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!
"""

import subprocess
import sys
import time
from datetime import datetime
import json

def run_architecture(script_name, arch_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüöÄ –ó–ê–ü–£–°–ö–ê–Æ {arch_name}...")
    print(f"üìù –°–∫—Ä–∏–ø—Ç: {script_name}")
    print("=" * 60)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run([sys.executable, script_name], 
                              capture_output=False, 
                              text=True,
                              timeout=3600)  # 1 —á–∞—Å –º–∞–∫—Å–∏–º—É–º
        
        if result.returncode == 0:
            print(f"‚úÖ {arch_name} –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            return {'success': True, 'arch': arch_name}
        else:
            print(f"‚ùå {arch_name} –ó–ê–í–ï–†–®–ï–ù –° –û–®–ò–ë–ö–û–ô!")
            return {'success': False, 'arch': arch_name, 'error': 'Non-zero exit code'}
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {arch_name} –ü–†–ï–í–´–®–ï–ù –¢–ê–ô–ú–ê–£–¢!")
        return {'success': False, 'arch': arch_name, 'error': 'Timeout'}
    except Exception as e:
        print(f"üí• {arch_name} –û–®–ò–ë–ö–ê: {e}")
        return {'success': False, 'arch': arch_name, 'error': str(e)}

def main():
    print("üöÄüöÄüöÄ –ë–û–õ–¨–®–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†! üöÄüöÄüöÄ")
    print("üéØ –¢–ï–°–¢–ò–†–£–ï–ú –í–°–ï 4 –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –° TQDM!")
    print("=" * 80)
    
    start_time = datetime.now()
    print(f"‚è∞ –ù–∞—á–∞–ª–æ: {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    architectures = [
        ("tqdm_lstm_v13.py", "üß† LSTM v13"),
        ("tqdm_transformer_v14.py", "ü§ñ TRANSFORMER v14"), 
        ("tqdm_mlp_v16.py", "üî• MLP v16"),
        ("working_test_with_tqdm.py", "‚ö° BASELINE")  # –ü—Ä–æ—Å—Ç–æ–π baseline
    ]
    
    results = []
    
    print(f"\nüìã –ü–õ–ê–ù –ó–ê–ü–£–°–ö–ê:")
    for i, (script, name) in enumerate(architectures, 1):
        print(f"   {i}. {name} - {script}")
    
    print(f"\nüéØ –¶–ï–õ–¨: –°—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —á–µ—Å—Ç–Ω–æ!")
    print(f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~40-60 –º–∏–Ω—É—Ç")
    print("üî• –ü–û–ï–•–ê–õ–ò!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    for i, (script, name) in enumerate(architectures, 1):
        print(f"\n{'='*80}")
        print(f"üéØ –≠–¢–ê–ü {i}/{len(architectures)}: {name}")
        print(f"{'='*80}")
        
        arch_start = time.time()
        result = run_architecture(script, name)
        arch_time = time.time() - arch_start
        
        result['duration'] = arch_time
        result['script'] = script
        results.append(result)
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {arch_time:.1f} —Å–µ–∫—É–Ω–¥")
        
        if result['success']:
            print(f"‚úÖ {name} –ì–û–¢–û–í!")
        else:
            print(f"‚ùå {name} –ù–ï –£–î–ê–õ–°–Ø: {result.get('error', 'Unknown error')}")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞–º–∏
        if i < len(architectures):
            print(f"\n‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π...")
            time.sleep(5)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    end_time = datetime.now()
    total_time = end_time - start_time
    
    print(f"\n{'='*80}")
    print(f"üèÅ –ë–û–õ–¨–®–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"{'='*80}")
    print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time}")
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    
    successful = 0
    failed = 0
    
    for result in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result['success'] else "‚ùå –û–®–ò–ë–ö–ê"
        duration = f"{result['duration']:.1f}s"
        print(f"   {result['arch']}: {status} ({duration})")
        
        if result['success']:
            successful += 1
        else:
            failed += 1
    
    print(f"\nüìà –ò–¢–û–ì–ò:")
    print(f"   ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
    print(f"   ‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
    print(f"   üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {successful/len(architectures)*100:.1f}%")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        'start_time': start_time.isoformat(),
        'end_time': end_time.isoformat(),
        'total_duration': str(total_time),
        'results': results,
        'summary': {
            'successful': successful,
            'failed': failed,
            'success_rate': successful/len(architectures)*100
        }
    }
    
    with open('–ë–û–õ–¨–®–û–ï_–°–†–ê–í–ù–ï–ù–ò–ï_–û–¢–ß–ï–¢.json', 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ë–û–õ–¨–®–û–ï_–°–†–ê–í–ù–ï–ù–ò–ï_–û–¢–ß–ï–¢.json")
    
    if successful > 0:
        print(f"\nüéâ –•–û–¢–Ø –ë–´ {successful} –ê–†–•–ò–¢–ï–ö–¢–£–† –†–ê–ë–û–¢–ê–Æ–¢!")
        print(f"üìä –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ models/ –ø–∞–ø–∫–µ")
        print(f"üîç –ò—â–∏—Ç–µ —Ñ–∞–π–ª—ã: tqdm-*_best –¥–ª—è –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π")
    
    if failed > 0:
        print(f"\n‚ö†Ô∏è {failed} –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –Ω–µ —É–¥–∞–ª–∏—Å—å - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
    
    print(f"\nüèÜ –ë–û–õ–¨–®–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–† –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"üî• EPIC NEURAL NETWORK BATTLE COMPLETE! üî•")

if __name__ == "__main__":
    main() 