#!/usr/bin/env python3
"""
üß† LSTM –ê–¢–ê–ö–ê: v13 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º epsilon!
üéØ –¶–ï–õ–¨: –ü—Ä–æ—Å—Ç–∞—è LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ë–ï–ó adaptive epsilon
"""

import torch
import torch.nn as nn
import numpy as np
from src.rl.env import Env
from src.rl.agent import Agent
import os
from datetime import datetime

class LSTMAgent(Agent):
    """LSTM –∞–≥–µ–Ω—Ç –±–µ–∑ –≤—Å—è–∫–∏—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–æ–≤"""
    
    def __init__(self, obs_space, **kwargs):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
        self.lstm_hidden = kwargs.get('lstm_hidden', 128)
        self.lstm_layers = kwargs.get('lstm_layers', 2)
        self.fc_hidden = kwargs.get('fc_hidden', 64)
        
        super().__init__(obs_space, **kwargs)
        
    def _create_network(self):
        """–°–æ–∑–¥–∞–µ–º LSTM —Å–µ—Ç—å –≤–º–µ—Å—Ç–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä–∞"""
        
        feature_dim = self.obs_space[1]  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π
        sequence_len = self.obs_space[2]  # –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        
        return LSTMQNetwork(
            feature_dim=feature_dim,
            sequence_len=sequence_len,
            lstm_hidden=self.lstm_hidden,
            lstm_layers=self.lstm_layers,
            fc_hidden=self.fc_hidden,
            action_size=3,
            dropout=self.dropout
        )
    
    def act(self, state, training=True):
        """–§–ò–ö–°–ò–†–û–í–ê–ù–ù–´–ô epsilon decay –ë–ï–ó adaptive boost!"""
        if training and np.random.random() <= self.epsilon:
            action = np.random.choice(3)
            if self.steps % 1000 == 0:
                print(f"üé≤ Random action: {action}, epsilon: {self.epsilon:.3f}")
            return action
        
        # –ù–µ–π—Ä–æ—Å–µ—Ç—å
        state_tensor = torch.FloatTensor(state).unsqueeze(0).to(self.device)
        q_values = self.q_network(state_tensor)
        action = q_values.cpu().data.numpy().argmax()
        
        if self.steps % 1000 == 0:
            print(f"üß† Neural action: {action}, Q: {q_values.cpu().data.numpy()}")
        
        return action
    
    def step(self, state, action, reward, next_state, done):
        """–®–∞–≥ LSTM –∞–≥–µ–Ω—Ç–∞ —Å –ü–†–ê–í–ò–õ–¨–ù–´–ú epsilon decay"""
        self.memory.add(state, action, reward, next_state, done)
        self.steps += 1
        
        # –ü–†–û–°–¢–û–ô epsilon decay –ë–ï–ó adaptive boost
        if self.epsilon > self.epsilon_min:
            self.epsilon *= self.epsilon_decay
            if self.steps % 1000 == 0:
                print(f"üìâ Epsilon decay: {self.epsilon:.3f}")
        
        if len(self.memory) > self.batch_size and self.steps % self.update_freq == 0:
            experiences = self.memory.sample()
            self.learn(experiences)


class LSTMQNetwork(nn.Module):
    """–ü—Ä–æ—Å—Ç–∞—è LSTM Q-—Å–µ—Ç—å"""
    
    def __init__(self, feature_dim, sequence_len, lstm_hidden, lstm_layers, fc_hidden, action_size, dropout=0.1):
        super().__init__()
        
        self.feature_dim = feature_dim
        self.sequence_len = sequence_len
        self.lstm_hidden = lstm_hidden
        self.lstm_layers = lstm_layers
        
        # Input embedding (optional)
        self.input_norm = nn.LayerNorm(feature_dim)
        
        # LSTM layers
        self.lstm = nn.LSTM(
            input_size=feature_dim,
            hidden_size=lstm_hidden,
            num_layers=lstm_layers,
            batch_first=True,
            dropout=dropout if lstm_layers > 1 else 0.0,
            bidirectional=False
        )
        
        # FC layers
        self.fc1 = nn.Linear(lstm_hidden, fc_hidden)
        self.dropout = nn.Dropout(dropout)
        self.fc2 = nn.Linear(fc_hidden, fc_hidden // 2)
        self.fc_out = nn.Linear(fc_hidden // 2, action_size)
        
        self.activation = nn.ReLU()
        
    def forward(self, x):
        # x: (batch, timesteps, features)
        batch_size = x.size(0)
        
        # Normalize input
        x = self.input_norm(x)
        
        # LSTM forward
        lstm_out, (hidden, cell) = self.lstm(x)
        
        # Take last output
        last_output = lstm_out[:, -1, :]  # (batch, lstm_hidden)
        
        # FC layers
        x = self.activation(self.fc1(last_output))
        x = self.dropout(x)
        x = self.activation(self.fc2(x))
        q_values = self.fc_out(x)
        
        return q_values


def enhanced_features(data, window=30):
    """
    üöÄ ENHANCED FEATURE SET –¥–ª—è LSTM
    –í—Å–µ —Ñ–∏—á–∏ –∏–∑ exp05.md + –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–∞–≥–∏
    """
    
    import pandas as pd
    import numpy as np
    
    df = pd.DataFrame(data.copy())
    features = []
    
    print("üöÄ –°–æ–∑–¥–∞—é ENHANCED LSTM —Ñ–∏—á–∏...")
    
    # 1. –ë–ê–ó–û–í–´–ï –¶–ï–ù–´ (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ)
    for col in ['open', 'high', 'low', 'close']:
        if col in df.columns:
            normalized = (df[col] - df[col].rolling(window).mean()) / df[col].rolling(window).std()
            features.append(normalized.fillna(0).values)
    
    # 2. –û–ë–™–ï–ú–´
    if 'volume' in df.columns:
        vol_norm = (df['volume'] - df['volume'].rolling(window).mean()) / df['volume'].rolling(window).std()
        features.append(vol_norm.fillna(0).values)
        
        # Volume rate of change
        vol_roc = df['volume'].pct_change(5).fillna(0)
        features.append(vol_roc.values)
    
    # 3. –í–†–ï–ú–ï–ù–ù–´–ï –õ–ê–ì–ò (1, 2, 3, 5, 10 –ø–µ—Ä–∏–æ–¥–æ–≤ –Ω–∞–∑–∞–¥)
    close_prices = df['close'] if 'close' in df.columns else df.iloc[:, 3]
    for lag in [1, 2, 3, 5, 10]:
        lagged = close_prices.shift(lag)
        lag_returns = ((close_prices - lagged) / lagged).fillna(0)
        features.append(lag_returns.values)
        print(f"   ‚úÖ –õ–∞–≥ {lag} –ø–µ—Ä–∏–æ–¥–æ–≤")
    
    # 4. –°–ö–û–õ–¨–ó–Ø–©–ò–ï –°–†–ï–î–ù–ò–ï —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    for period in [5, 10, 20, 50]:
        if len(close_prices) > period:
            ma = close_prices.rolling(period).mean()
            ma_ratio = (close_prices / ma - 1).fillna(0)
            features.append(ma_ratio.values)
            print(f"   ‚úÖ MA-{period}")
    
    # 5. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ò–ù–î–ò–ö–ê–¢–û–†–´
    # RSI
    delta = close_prices.diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    rsi = (100 - (100 / (1 + rs))).fillna(50) / 100  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
    features.append(rsi.values)
    
    # MACD
    ema12 = close_prices.ewm(span=12).mean()
    ema26 = close_prices.ewm(span=26).mean()
    macd = (ema12 - ema26).fillna(0)
    macd_norm = (macd - macd.rolling(window).mean()) / macd.rolling(window).std()
    features.append(macd_norm.fillna(0).values)
    
    # 6. –í–û–õ–ê–¢–ò–õ–¨–ù–û–°–¢–¨ (—Å–∫–æ–ª—å–∑—è—â–∞—è)
    returns = close_prices.pct_change().fillna(0)
    volatility = returns.rolling(window=20).std().fillna(0)
    features.append(volatility.values)
    
    # 7. –í–†–ï–ú–ï–ù–ù–´–ï –§–ò–ß–ò
    # –ü–æ–∑–∏—Ü–∏—è –≤ —Å–µ—Å—Å–∏–∏ (0-1)
    session_pos = np.arange(len(df)) / len(df)
    features.append(session_pos)
    
    # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω–¥–µ–∫—Å —Å –¥–∞—Ç–∞–º–∏)
    try:
        if hasattr(df.index, 'weekday'):
            weekday = df.index.weekday / 6.0  # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º 0-1
            features.append(weekday.values)
        else:
            # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            weekday = (np.arange(len(df)) % 7) / 6.0
            features.append(weekday)
    except:
        weekday = (np.arange(len(df)) % 7) / 6.0
        features.append(weekday)
    
    # 8. MOMENTUM —Ñ–∏—á–∏
    # Rate of Change —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    for period in [5, 10, 20]:
        roc = close_prices.pct_change(period).fillna(0)
        features.append(roc.values)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ñ–∏—á–∏
    feature_matrix = np.column_stack(features)
    feature_count = feature_matrix.shape[1]
    
    print(f"üéØ –°–æ–∑–¥–∞–Ω–æ {feature_count} ENHANCED —Ñ–∏—á–µ–π –¥–ª—è LSTM:")
    feature_names = [
        'open_norm', 'high_norm', 'low_norm', 'close_norm', 'volume_norm', 'volume_roc',
        'lag_1', 'lag_2', 'lag_3', 'lag_5', 'lag_10',
        'ma_5', 'ma_10', 'ma_20', 'ma_50',
        'rsi', 'macd', 'volatility', 'session_pos', 'weekday',
        'roc_5', 'roc_10', 'roc_20'
    ]
    
    for i, name in enumerate(feature_names[:feature_count]):
        print(f"   {i+1:2d}. {name}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ Inf
    feature_matrix = np.nan_to_num(feature_matrix, nan=0.0, posinf=1.0, neginf=-1.0)
    
    return feature_matrix


def main():
    """LSTM —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç v13"""
    
    print("üß† LSTM –ê–¢–ê–ö–ê v13: –ü—Ä–æ—Å—Ç–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞!")
    print("üéØ –¶–ï–õ–¨: LSTM + —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π epsilon + enhanced —Ñ–∏—á–∏")
    print("üîß –ë–ï–ó adaptive epsilon boost!")
    print("=" * 60)
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã LSTM —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
    config = {
        'episodes': 200,
        'trading_period': 90,  # —Å—Ä–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        'window': 40,          # —á—É—Ç—å –±–æ–ª—å—à–µ –æ–∫–Ω–æ
        'target_profit': 500,  # —É–º–µ—Ä–µ–Ω–Ω–∞—è —Ü–µ–ª—å
        'commission': 0.0002,
        
        # LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
        'lstm_hidden': 128,
        'lstm_layers': 2,
        'fc_hidden': 64,
        'dropout': 0.1,
        
        # –û–±—É—á–µ–Ω–∏–µ
        'lr': 0.001,
        'epsilon': 0.9,        # —Å—Ç–∞—Ä—Ç—É–µ–º –≤—ã—Å–æ–∫–æ
        'epsilon_min': 0.01,   # –Ω–æ –æ–ø—É—Å–∫–∞–µ–º –Ω–∏–∑–∫–æ
        'epsilon_decay': 0.995, # –º–µ–¥–ª–µ–Ω–Ω—ã–π decay
        'gamma': 0.95,
        'memory_size': 10000,
        'batch_size': 256,
        'update_freq': 5
    }
    
    print(f"üìä LSTM –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø:")
    for key, value in config.items():
        print(f"   {key}: {value}")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å enhanced —Ñ–∏—á–∞–º–∏
    train_env = Env(
        csv_paths=["GOOG_2010_2024-06.csv"],
        fee=config['commission'],
        trading_period=config['trading_period'],
        window=config['window'],
        feature_extractor=enhanced_features
    )
    
    oos_env = Env(
        csv_paths=["GOOG_2024-07_2025-04.csv"],
        fee=config['commission'],
        trading_period=config['trading_period'],
        window=config['window'],
        feature_extractor=enhanced_features
    )
    
    print(f"üìä LSTM –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print(f"   Train observation space: {train_env.stock.obs_space}")
    print(f"   OOS observation space: {oos_env.stock.obs_space}")
    print(f"   Target profit: ${config['target_profit']}")
    
    # –°–æ–∑–¥–∞–µ–º LSTM –∞–≥–µ–Ω—Ç–∞
    agent = LSTMAgent(
        obs_space=train_env.stock.obs_space,
        **{k: v for k, v in config.items() if k not in ['episodes', 'trading_period', 'window', 'target_profit', 'commission']}
    )
    
    print(f"üß† LSTM –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:")
    print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: LSTM({config['lstm_hidden']}) x {config['lstm_layers']}")
    print(f"   FC: {config['fc_hidden']} -> {config['fc_hidden']//2} -> 3")
    print(f"   Epsilon: {config['epsilon']} -> {config['epsilon_min']} (decay: {config['epsilon_decay']})")
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_file = f"models/google-trading-v13-lstm.log"
    model_name = "google-trading-v13-lstm"
    
    best_median = -float('inf')
    stability_count = 0
    
    print(f"\nüß† –ù–∞—á–∏–Ω–∞—é LSTM –æ–±—É—á–µ–Ω–∏–µ...")
    
    with open(log_file, "w", encoding='utf-8') as f:
        f.write(f"üß† LSTM Training Log v13 - {datetime.now()}\n")
        f.write(f"Config: {config}\n")
        f.write("=" * 80 + "\n")
    
    for episode in range(config['episodes']):
        # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        train_env.stock.reset()
        total_reward = 0
        trades = 0
        wins = 0
        
        while not train_env.stock.done:
            state = train_env.stock.get_state()
            action = agent.act(state)
            reward, profit, trade_made = train_env.stock.step(action)
            next_state = train_env.stock.get_state()
            
            agent.step(state, action, reward, next_state, train_env.stock.done)
            
            total_reward += reward
            if trade_made:
                trades += 1
                if profit > 0:
                    wins += 1
        
        train_profit = train_env.stock.total_profit
        win_rate = (wins / trades * 100) if trades > 0 else 0
        
        # OOS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —ç–ø–∏–∑–æ–¥–æ–≤
        if episode % 10 == 0:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 5 —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            oos_profits = []
            for start_pos in range(0, min(50, len(oos_env.stock.closes) - config['trading_period'] - config['window']), 10):
                oos_env.stock.reset_fixed(start_pos)
                oos_profit = 0
                
                while not oos_env.stock.done:
                    state = oos_env.stock.get_state()
                    action = agent.act(state, training=False)  # –ë–ï–ó exploration
                    reward, profit, trade_made = oos_env.stock.step(action)
                    oos_profit += profit
                
                oos_profits.append(oos_env.stock.total_profit)
            
            median_oos = np.median(oos_profits)
            mean_oos = np.mean(oos_profits)
            consistency = (np.array(oos_profits) > 0).mean() * 100
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            if median_oos > 30:  # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å
                stability_count += 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
            if median_oos > best_median:
                best_median = median_oos
                agent.save(f"models/{model_name}_best")
                print(f"üíæ –ù–æ–≤–∞—è –ª—É—á—à–∞—è –º–µ–¥–∏–∞–Ω–∞: ${median_oos:.0f} (—ç–ø–∏–∑–æ–¥ {episode})")
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            log_entry = (
                f"Ep: {episode:3d} | Train: ${train_profit:4.0f} | OOS Med: ${median_oos:4.0f}\\n"
                f"    Train: {trades} trades, {win_rate:.1f}% win\\n"
                f"    OOS: Med ${median_oos:.0f}, Mean ${mean_oos:.0f}, Consistency {consistency:.1f}%\\n"
                f"    Epsilon: {agent.epsilon:.3f} | Best median: ${best_median:.0f}\\n"
                f"    All OOS: {[int(p) for p in oos_profits]}\\n"
                + "-" * 60
            )
            
            print(log_entry.replace("\\n", "\n"))
            
            with open(log_file, "a", encoding='utf-8') as f:
                f.write(log_entry + "\n")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    agent.save(f"models/{model_name}")
    
    print(f"\nüß† LSTM –æ–±—É—á–µ–Ω–∏–µ v13 –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/{model_name}")
    print(f"üèÜ –õ—É—á—à–∞—è –º–µ–¥–∏–∞–Ω–∞: models/{model_name}_best")
    print(f"üìä –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {log_file}")
    print(f"üéØ –°—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {stability_count}/{config['episodes']//10}")
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print(f"\nüî¨ –§–∏–Ω–∞–ª—å–Ω–æ–µ LSTM —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    final_profits = []
    for start_pos in range(0, min(100, len(oos_env.stock.closes) - config['trading_period'] - config['window']), 5):
        oos_env.stock.reset_fixed(start_pos)
        
        while not oos_env.stock.done:
            state = oos_env.stock.get_state()
            action = agent.act(state, training=False)
            reward, profit, trade_made = oos_env.stock.step(action)
        
        final_profits.append(oos_env.stock.total_profit)
    
    final_median = np.median(final_profits)
    final_consistency = (np.array(final_profits) > 0).mean() * 100
    final_std = np.std(final_profits)
    
    print(f"üìà –§–ò–ù–ê–õ–¨–ù–´–ï LSTM –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   –ú–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${final_median:.2f}")
    print(f"   Consistency: {final_consistency:.1f}%")
    print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${final_std:.2f}")
    print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: ${min(final_profits):.0f} - ${max(final_profits):.0f}")
    
    if final_consistency > 60 and final_median > 100:
        print("‚úÖ LSTM –ø–æ–∫–∞–∑–∞–ª —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
    else:
        print("‚ùå LSTM —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏...")


if __name__ == "__main__":
    main() 