import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


def analyze_training_log(log_path):
    """–ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ –¥–ª—è v5"""
    try:
        df = pd.read_csv(f"models/{log_path}.log")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        fig, axes = plt.subplots(3, 3, figsize=(20, 15))
        fig.suptitle(f'Training Analysis v5: {log_path}', fontsize=16)
        
        # 1. Profit –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
        axes[0, 0].plot(df['episode'], df['profit_dollars'], label='Training', alpha=0.7, color='blue')
        if 'oos_profit_dollars' in df.columns:
            axes[0, 0].plot(df['episode'], df['oos_profit_dollars'], label='OOS', alpha=0.7, color='red')
        axes[0, 0].set_title('Profit ($)')
        axes[0, 0].set_xlabel('Episode')
        axes[0, 0].set_ylabel('Profit ($)')
        axes[0, 0].legend()
        axes[0, 0].grid(True)
        
        # 2. Sharpe Ratio
        axes[0, 1].plot(df['episode'], df['sharpe_ratio'], label='Training', alpha=0.7, color='blue')
        if 'oos_sharpe_ratio' in df.columns:
            axes[0, 1].plot(df['episode'], df['oos_sharpe_ratio'], label='OOS', alpha=0.7, color='red')
        axes[0, 1].set_title('Sharpe Ratio')
        axes[0, 1].set_xlabel('Episode')
        axes[0, 1].set_ylabel('Sharpe Ratio')
        axes[0, 1].legend()
        axes[0, 1].grid(True)
        
        # 3. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
        axes[0, 2].plot(df['episode'], df['num_trades'], label='Training', alpha=0.7, color='blue')
        if 'oos_num_trades' in df.columns:
            axes[0, 2].plot(df['episode'], df['oos_num_trades'], label='OOS', alpha=0.7, color='red')
        axes[0, 2].set_title('Number of Trades')
        axes[0, 2].set_xlabel('Episode')
        axes[0, 2].set_ylabel('Trades')
        axes[0, 2].legend()
        axes[0, 2].grid(True)
        
        # 4. Win Rate
        axes[1, 0].plot(df['episode'], df['win_rate'] * 100, label='Training', alpha=0.7, color='blue')
        if 'oos_win_rate' in df.columns:
            axes[1, 0].plot(df['episode'], df['oos_win_rate'] * 100, label='OOS', alpha=0.7, color='red')
        axes[1, 0].set_title('Win Rate (%)')
        axes[1, 0].set_xlabel('Episode')
        axes[1, 0].set_ylabel('Win Rate (%)')
        axes[1, 0].legend()
        axes[1, 0].grid(True)
        
        # 5. Loss –∏ Epsilon
        axes[1, 1].plot(df['episode'], df['loss'], alpha=0.7, label='Loss', color='purple')
        ax_twin = axes[1, 1].twinx()
        ax_twin.plot(df['episode'], df['epsilon'], alpha=0.7, label='Epsilon', color='orange')
        if 'adaptive_epsilon' in df.columns:
            ax_twin.plot(df['episode'], df['adaptive_epsilon'], alpha=0.7, label='Adaptive Œµ', color='green')
        axes[1, 1].set_title('Loss & Epsilon')
        axes[1, 1].set_xlabel('Episode')
        axes[1, 1].set_ylabel('Loss')
        ax_twin.set_ylabel('Epsilon')
        axes[1, 1].legend(loc='upper left')
        ax_twin.legend(loc='upper right')
        axes[1, 1].grid(True)
        
        # 6. Exploration Balance (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if 'exploration_balance' in df.columns:
            axes[1, 2].plot(df['episode'], df['exploration_balance'], alpha=0.7, color='green')
            axes[1, 2].set_title('Exploration Balance')
            axes[1, 2].set_xlabel('Episode')
            axes[1, 2].set_ylabel('Balance (min/max actions)')
            axes[1, 2].grid(True)
        else:
            axes[1, 2].text(0.5, 0.5, 'No exploration data', ha='center', va='center', transform=axes[1, 2].transAxes)
        
        # 7. Action Distribution (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if all(col in df.columns for col in ['hold_pct', 'buy_pct', 'sell_pct']):
            axes[2, 0].plot(df['episode'], df['hold_pct'] * 100, label='Hold', alpha=0.7)
            axes[2, 0].plot(df['episode'], df['buy_pct'] * 100, label='Buy', alpha=0.7)
            axes[2, 0].plot(df['episode'], df['sell_pct'] * 100, label='Sell', alpha=0.7)
            axes[2, 0].set_title('Action Distribution (%)')
            axes[2, 0].set_xlabel('Episode')
            axes[2, 0].set_ylabel('Percentage')
            axes[2, 0].legend()
            axes[2, 0].grid(True)
        else:
            axes[2, 0].text(0.5, 0.5, 'No action data', ha='center', va='center', transform=axes[2, 0].transAxes)
        
        # 8. Cumulative Performance
        cumulative_train = np.cumsum(df['profit_dollars'])
        axes[2, 1].plot(df['episode'], cumulative_train, label='Cumulative Training', alpha=0.7, color='blue')
        if 'oos_profit_dollars' in df.columns:
            # –°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è OOS
            oos_smooth = df['oos_profit_dollars'].rolling(window=10, min_periods=1).mean()
            axes[2, 1].plot(df['episode'], oos_smooth, label='OOS (smoothed)', alpha=0.7, color='red')
        axes[2, 1].set_title('Cumulative Performance')
        axes[2, 1].set_xlabel('Episode')
        axes[2, 1].set_ylabel('Cumulative Profit ($)')
        axes[2, 1].legend()
        axes[2, 1].grid(True)
        
        # 9. Performance Correlation
        if 'oos_profit_dollars' in df.columns:
            # –°–∫–æ–ª—å–∑—è—â–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è
            window = 20
            rolling_corr = []
            for i in range(window, len(df)):
                train_window = df['profit_dollars'].iloc[i-window:i]
                oos_window = df['oos_profit_dollars'].iloc[i-window:i]
                corr = np.corrcoef(train_window, oos_window)[0, 1]
                rolling_corr.append(corr if not np.isnan(corr) else 0)
            
            axes[2, 2].plot(df['episode'].iloc[window:], rolling_corr, alpha=0.7, color='purple')
            axes[2, 2].axhline(y=0, color='gray', linestyle='--', alpha=0.5)
            axes[2, 2].set_title('Rolling Correlation (Train vs OOS)')
            axes[2, 2].set_xlabel('Episode')
            axes[2, 2].set_ylabel('Correlation')
            axes[2, 2].grid(True)
        else:
            axes[2, 2].text(0.5, 0.5, 'No OOS data', ha='center', va='center', transform=axes[2, 2].transAxes)
        
        plt.tight_layout()
        plt.savefig(f'models/{log_path}_analysis.png', dpi=300, bbox_inches='tight')
        plt.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞
        print(f"üìä –£–ª—É—á—à–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ v5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: models/{log_path}_analysis.png")
        
        # –ü–µ—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ v5
        print(f"\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í v5: {log_path}")
        print("=" * 60)
        
        print("\nüéØ –û–ë–£–ß–ï–ù–ò–ï:")
        print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π Profit: ${df['profit_dollars'].iloc[-1]:.0f}")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Profit: ${df['profit_dollars'].max():.0f}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Profit: ${df['profit_dollars'].min():.0f}")
        print(f"  –°—Ä–µ–¥–Ω–∏–π Sharpe: {df['sharpe_ratio'].mean():.3f}")
        print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π Sharpe: {df['sharpe_ratio'].iloc[-1]:.3f}")
        print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫: {df['num_trades'].mean():.1f}")
        print(f"  –°—Ä–µ–¥–Ω–∏–π Win Rate: {df['win_rate'].mean()*100:.1f}%")
        print(f"  –°—Ä–µ–¥–Ω–∏–π Loss: {df['loss'].mean():.4f}")
        print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π Loss: {df['loss'].iloc[-1]:.4f}")
        print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π Epsilon: {df['epsilon'].iloc[-1]:.3f}")
        
        if 'oos_profit_dollars' in df.columns:
            print("\nüß™ OUT-OF-SAMPLE:")
            print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π Profit: ${df['oos_profit_dollars'].iloc[-1]:.0f}")
            print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π Profit: ${df['oos_profit_dollars'].max():.0f}")
            print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π Profit: ${df['oos_profit_dollars'].min():.0f}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π Sharpe: {df['oos_sharpe_ratio'].mean():.3f}")
            print(f"  –§–∏–Ω–∞–ª—å–Ω—ã–π Sharpe: {df['oos_sharpe_ratio'].iloc[-1]:.3f}")
            print(f"  –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫: {df['oos_num_trades'].mean():.1f}")
            print(f"  –°—Ä–µ–¥–Ω–∏–π Win Rate: {df['oos_win_rate'].mean()*100:.1f}%")
        
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É train –∏ OOS
        if 'oos_profit_dollars' in df.columns:
            corr_profit = np.corrcoef(df['profit_dollars'], df['oos_profit_dollars'])[0, 1]
            corr_sharpe = np.corrcoef(df['sharpe_ratio'], df['oos_sharpe_ratio'])[0, 1]
            print(f"\nüìà –ö–û–†–†–ï–õ–Ø–¶–ò–Ø TRAIN vs OOS:")
            print(f"  Profit correlation: {corr_profit:.3f}")
            print(f"  Sharpe correlation: {corr_sharpe:.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ exploration
        if all(col in df.columns for col in ['hold_pct', 'buy_pct', 'sell_pct']):
            print(f"\nüé≤ EXPLORATION –ê–ù–ê–õ–ò–ó:")
            print(f"  –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π:")
            print(f"    Hold: {df['hold_pct'].iloc[-1]*100:.1f}%")
            print(f"    Buy: {df['buy_pct'].iloc[-1]*100:.1f}%")
            print(f"    Sell: {df['sell_pct'].iloc[-1]*100:.1f}%")
            if 'exploration_balance' in df.columns:
                print(f"  –°—Ä–µ–¥–Ω–∏–π exploration balance: {df['exploration_balance'].mean():.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Å–∏–π v5
        print(f"\nüöÄ –ê–ù–ê–õ–ò–ó –£–õ–£–ß–®–ï–ù–ò–ô v5:")
        print(f"  üéØ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: 11 –≤–º–µ—Å—Ç–æ 23")
        print(f"  üîÑ Reward engineering: –í–∫–ª—é—á–µ–Ω")
        print(f"  üé≤ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π epsilon: –í–∫–ª—é—á–µ–Ω")
        print(f"  ü§î Curiosity exploration: –í–∫–ª—é—á–µ–Ω")
        print(f"  ‚ö° –ß–∞—Å—Ç–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ö–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤")
        print(f"  üìà –ë–æ–ª—å—à–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤: 50 –¥–Ω–µ–π")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ –≤–µ—Ä—Å–∏—è–º–∏
        print(f"\nüîÑ –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –í–ï–†–°–ò–ô:")
        print(f"  v1 (–±–∞–∑–æ–≤–∞—è): Training $1144, OOS $-342, Corr: 0.15")
        print(f"  v2 (—É–ª—É—á—à–µ–Ω–Ω–∞—è): Training $198, OOS $-195, Corr: -0.01")
        print(f"  v3 (—Ñ–∏–Ω–∞–ª—å–Ω–∞—è): Training $-195, OOS $-195, Corr: -0.01")
        print(f"  v4 (23 –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞): Training $-2212, OOS $0, Corr: 0.05")
        print(f"  v5 (—É–º–Ω–∞—è): Training ${df['profit_dollars'].iloc[-1]:.0f}, OOS ${df['oos_profit_dollars'].iloc[-1]:.0f}, Corr: {corr_profit:.2f}")
        
        # –í—ã–≤–æ–¥—ã –∏ –æ—Ü–µ–Ω–∫–∞
        print(f"\nüí° –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´ v5:")
        
        oos_improvement = df['oos_profit_dollars'].iloc[-1] > 0
        low_loss = df['loss'].iloc[-1] < 0.02
        good_trading_activity = df['num_trades'].mean() > 5
        
        if oos_improvement:
            print("  ‚úÖ –£–°–ü–ï–•: OOS –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π - –º–æ–¥–µ–ª—å –æ–±–æ–±—â–∞–µ—Ç!")
        
        if low_loss:
            print("  ‚úÖ –£–°–ü–ï–•: –ù–∏–∑–∫–∏–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π loss - —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ!")
        
        if good_trading_activity:
            print("  ‚úÖ –£–°–ü–ï–•: –•–æ—Ä–æ—à–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        if df['profit_dollars'].iloc[-1] < -1000:
            print("  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ë–æ–ª—å—à–∏–µ –ø–æ—Ç–µ—Ä–∏ –Ω–∞ –æ–±—É—á–µ–Ω–∏–∏")
        
        if abs(corr_profit) < 0.1:
            print("  ‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∞–±–∞—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—è train-OOS")
        
        # –î–∏–Ω–∞–º–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
        profit_trend = np.polyfit(range(len(df)), df['profit_dollars'], 1)[0]
        if profit_trend > 0:
            print("  üìà –ü–û–ó–ò–¢–ò–í–ù–û: –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
        else:
            print("  üìâ –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        score = 0
        if oos_improvement: score += 3
        if low_loss: score += 2
        if good_trading_activity: score += 2
        if abs(corr_profit) > 0.1: score += 1
        if profit_trend > 0: score += 1
        
        print(f"\nüèÜ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê v5: {score}/9")
        if score >= 7:
            print("  üåü –û–¢–õ–ò–ß–ù–û: –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        elif score >= 5:
            print("  ‚úÖ –•–û–†–û–®–û: –ú–æ–¥–µ–ª—å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!")
        elif score >= 3:
            print("  ‚ö° –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û: –ï—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è, –Ω–æ –Ω—É–∂–Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
        else:
            print("  ‚ùå –ü–õ–û–•–û: –ú–æ–¥–µ–ª—å —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        return df
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return None


if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ v5
    analyze_training_log("google-trading-v5-smart") 