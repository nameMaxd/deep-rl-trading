"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π (cherry-picking) –∏ –Ω–æ–≤–æ–π (—á–µ—Å—Ç–Ω–æ–π) –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""
from src.rl.agent import Agent
from src.rl.env import Env
from main_v11_honest import test_oos_honest, test_oos_comprehensive
import numpy as np
import os


def test_old_methodology(agent, oos_env):
    """–°—Ç–∞—Ä–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è: cherry-picking –ª—É—á—à–µ–≥–æ –∏–∑ 7 –ø—Ä–æ–≥–æ–Ω–æ–≤"""
    old_epsilon = agent.epsilon
    agent.epsilon = 0.3  # –ö–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–∞—Ö
    
    results = []
    
    # 7 –ø—Ä–æ–≥–æ–Ω–æ–≤ —Å —Å–ª—É—á–∞–π–Ω—ã–º–∏ —Å—Ç–∞—Ä—Ç–∞–º–∏ (–∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ)
    for _ in range(7):
        state = oos_env.reset()  # –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ä—Ç!
        done = False
        
        while not done:
            action = agent.act(state, training=False)
            next_state, _, reward, done = oos_env.step(action)
            state = next_state
        
        metrics = oos_env.get_trading_metrics()
        results.append(metrics)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –õ–£–ß–®–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç (cherry-picking!)
    agent.epsilon = old_epsilon
    
    if results:
        best_result = max(results, key=lambda x: x['total_profit_dollars'])
        all_profits = [r['total_profit_dollars'] for r in results]
        return {
            'cherry_picked_profit': best_result['total_profit_dollars'],
            'all_profits': all_profits,
            'mean_profit': np.mean(all_profits),
            'median_profit': np.median(all_profits),
            'trades': best_result['num_trades'],
            'win_rate': best_result['win_rate'],
            'sharpe': best_result['sharpe_ratio']
        }
    else:
        return {'cherry_picked_profit': 0, 'all_profits': [], 'mean_profit': 0, 'median_profit': 0, 'trades': 0, 'win_rate': 0, 'sharpe': 0}


def main():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏"""
    
    print("üî¨ –°–†–ê–í–ù–ï–ù–ò–ï –ú–ï–¢–û–î–û–õ–û–ì–ò–ô –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    print("üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ –º–æ–¥–µ–ª–∏ elysium-v1 (–µ—Å–ª–∏ –µ—Å—Ç—å)")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–∫–∞–∫ –≤ v11)
    trading_period = 120
    window_size = 50
    fee = 0.0002
    oos_csv = "GOOG_2024-07_2025-04.csv"
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    oos_env = Env(csv_paths=[oos_csv], fee=fee, trading_period=trading_period, window=window_size)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    agent = Agent(obs_space=oos_env.stock.obs_space, epsilon=0.3)
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –º–æ–¥–µ–ª—å
    model_path = "models/elysium-v1"
    if os.path.exists(model_path):
        print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å: {model_path}")
        agent.load(model_path)
    else:
        print("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    
    print("\nüîç –¢–ï–°–¢ 1: –°—Ç–∞—Ä–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è (cherry-picking)")
    print("-" * 40)
    
    old_results = test_old_methodology(agent, oos_env)
    print(f"Cherry-picked profit: ${old_results['cherry_picked_profit']:.0f}")
    print(f"–í—Å–µ 7 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {[f'${p:.0f}' for p in old_results['all_profits']]}")
    print(f"–†–µ–∞–ª—å–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: ${old_results['mean_profit']:.0f}")
    print(f"–ú–µ–¥–∏–∞–Ω–Ω–æ–µ: ${old_results['median_profit']:.0f}")
    print(f"Trades: {old_results['trades']}, Win rate: {old_results['win_rate']*100:.1f}%")
    
    print("\nüéØ –¢–ï–°–¢ 2: –ù–æ–≤–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è (—á–µ—Å—Ç–Ω–∞—è)")
    print("-" * 40)
    
    new_results = test_oos_comprehensive(agent, oos_env, detailed=True)
    print(f"–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${new_results['fixed_profit']:.0f}")
    print(f"–ú–µ–¥–∏–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${new_results['median_profit']:.0f}")
    print(f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${new_results['mean_profit']:.0f}")
    print(f"–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${new_results['best_profit']:.0f}")
    print(f"–•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${new_results['worst_profit']:.0f}")
    print(f"Consistency: {new_results['consistency']*100:.1f}%")
    print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {new_results['total_tests']}")
    
    print("\nüìä –°–†–ê–í–ù–ï–ù–ò–ï")
    print("=" * 60)
    
    cherry_vs_median = old_results['cherry_picked_profit'] - new_results['median_profit']
    cherry_vs_mean = old_results['cherry_picked_profit'] - new_results['mean_profit']
    
    print(f"Cherry-picked: ${old_results['cherry_picked_profit']:.0f}")
    print(f"–ß–µ—Å—Ç–Ω–æ–µ –º–µ–¥–∏–∞–Ω–Ω–æ–µ: ${new_results['median_profit']:.0f}")
    print(f"–†–∞–∑–Ω–∏—Ü–∞ (–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞): ${cherry_vs_median:.0f}")
    print(f"")
    print(f"Cherry-picked: ${old_results['cherry_picked_profit']:.0f}")
    print(f"–ß–µ—Å—Ç–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: ${new_results['mean_profit']:.0f}")
    print(f"–†–∞–∑–Ω–∏—Ü–∞ (–ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∞): ${cherry_vs_mean:.0f}")
    
    print(f"\nüí° –í–´–í–û–î–´:")
    if cherry_vs_median > 100:
        print(f"‚ùå –°—Ç–∞—Ä–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –°–ò–õ–¨–ù–û –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ ${cherry_vs_median:.0f}")
    elif cherry_vs_median > 50:
        print(f"‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ ${cherry_vs_median:.0f}")
    elif cherry_vs_median > 0:
        print(f"üìä –°—Ç–∞—Ä–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è —Å–ª–µ–≥–∫–∞ –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –Ω–∞ ${cherry_vs_median:.0f}")
    else:
        print(f"‚úÖ –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –¥–∞—é—Ç —Å—Ö–æ–∂–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    
    print(f"\nüéØ –ß–ï–°–¢–ù–ê–Ø –û–¶–ï–ù–ö–ê:")
    if new_results['consistency'] >= 0.6:
        print(f"‚úÖ –•–æ—Ä–æ—à–∞—è consistency: {new_results['consistency']*100:.1f}%")
    else:
        print(f"‚ùå –ù–∏–∑–∫–∞—è consistency: {new_results['consistency']*100:.1f}%")
    
    if new_results['median_profit'] >= 50:
        print(f"‚úÖ –ü—Ä–∏–µ–º–ª–µ–º—ã–π –º–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${new_results['median_profit']:.0f}")
    else:
        print(f"‚ùå –ù–∏–∑–∫–∏–π –º–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${new_results['median_profit']:.0f}")


if __name__ == "__main__":
    main() 