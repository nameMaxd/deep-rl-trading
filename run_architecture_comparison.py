#!/usr/bin/env python3
"""
üèÜ –ë–û–õ–¨–®–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†!
üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏ –ø–æ–¥—Ä—è–¥ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
"""

import subprocess
import time
import os
import json
from datetime import datetime
import re

def run_experiment(script_name, description):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    print(f"\nüöÄ –ó–ê–ü–£–°–ö: {description}")
    print(f"üìÅ –°–∫—Ä–∏–ø—Ç: {script_name}")
    print("=" * 60)
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run(
            ["python", script_name], 
            capture_output=True, 
            text=True, 
            timeout=3600  # 1 —á–∞—Å –º–∞–∫—Å–∏–º—É–º
        )
        
        end_time = time.time()
        duration = end_time - start_time
        
        if result.returncode == 0:
            print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {duration:.0f} —Å–µ–∫—É–Ω–¥")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—ã–≤–æ–¥–∞
            output = result.stdout
            final_results = extract_final_results(output, script_name)
            final_results['duration'] = duration
            final_results['success'] = True
            final_results['script'] = script_name
            final_results['description'] = description
            
            return final_results
            
        else:
            print(f"‚ùå {description} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π!")
            print(f"–û—à–∏–±–∫–∞: {result.stderr}")
            
            return {
                'script': script_name,
                'description': description,
                'success': False,
                'error': result.stderr,
                'duration': duration
            }
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ {description} –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏!")
        return {
            'script': script_name,
            'description': description,
            'success': False,
            'error': 'Timeout',
            'duration': 3600
        }
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ {description}: {e}")
        return {
            'script': script_name,
            'description': description,
            'success': False,
            'error': str(e),
            'duration': 0
        }

def extract_final_results(output, script_name):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤—ã–≤–æ–¥–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    
    results = {
        'median_profit': 0,
        'consistency': 0,
        'std_dev': 0,
        'best_median': 0,
        'stability_count': 0,
        'range_min': 0,
        'range_max': 0
    }
    
    try:
        # –ò—â–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        lines = output.split('\n')
        
        for i, line in enumerate(lines):
            # –ú–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç
            if '–ú–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç:' in line:
                match = re.search(r'\\$([\\d\\.\\-]+)', line)
                if match:
                    results['median_profit'] = float(match.group(1))
            
            # Consistency
            if 'Consistency:' in line:
                match = re.search(r'([\\d\\.]+)%', line)
                if match:
                    results['consistency'] = float(match.group(1))
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
            if '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ:' in line:
                match = re.search(r'\\$([\\d\\.]+)', line)
                if match:
                    results['std_dev'] = float(match.group(1))
            
            # –õ—É—á—à–∞—è –º–µ–¥–∏–∞–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
            if 'Best median:' in line:
                match = re.search(r'\\$([\\d\\.\\-]+)', line)
                if match:
                    results['best_median'] = max(results['best_median'], float(match.group(1)))
            
            # –î–∏–∞–ø–∞–∑–æ–Ω
            if '–î–∏–∞–ø–∞–∑–æ–Ω:' in line:
                match = re.search(r'\\$([\\d\\.\\-]+) - \\$([\\d\\.\\-]+)', line)
                if match:
                    results['range_min'] = float(match.group(1))
                    results['range_max'] = float(match.group(2))
            
            # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if '–°—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:' in line:
                match = re.search(r'(\\d+)/(\\d+)', line)
                if match:
                    results['stability_count'] = int(match.group(1))
                    results['total_tests'] = int(match.group(2))
    
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
    
    return results

def create_comparison_report(all_results):
    """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    report_file = f"architecture_comparison_report_{datetime.now().strftime('%Y%m%d_%H%M')}.md"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("# üèÜ –ë–û–õ–¨–®–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –ê–†–•–ò–¢–ï–ö–¢–£–†\\n\\n")
        f.write(f"**–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M')}\\n\\n")
        f.write("## üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞\\n\\n")
        f.write("| –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ | –ú–µ–¥–∏–∞–Ω–∞ $ | Consistency % | –õ—É—á—à–∞—è $ | –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å | –í—Ä–µ–º—è –º–∏–Ω | –°—Ç–∞—Ç—É—Å |\\n")
        f.write("|-------------|-----------|---------------|----------|--------------|-----------|--------|\\n")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ–¥–∏–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
        successful_results = [r for r in all_results if r['success']]
        successful_results.sort(key=lambda x: x.get('median_profit', -1000), reverse=True)
        
        for result in all_results:
            if result['success']:
                name = result['description'].replace('v13_LSTM', 'LSTM').replace('v14_Transformer_Fixed', 'Transformer').replace('v15_SSM', 'SSM').replace('v16_MLP', 'MLP')
                median = result.get('median_profit', 0)
                consistency = result.get('consistency', 0)
                best = result.get('best_median', 0)
                stability = f"{result.get('stability_count', 0)}/{result.get('total_tests', 0)}" if result.get('total_tests') else "N/A"
                duration = result['duration'] / 60
                status = "‚úÖ"
                
                f.write(f"| {name} | ${median:.0f} | {consistency:.1f}% | ${best:.0f} | {stability} | {duration:.0f} | {status} |\\n")
            else:
                name = result['description']
                f.write(f"| {name} | N/A | N/A | N/A | N/A | {result['duration']/60:.0f} | ‚ùå |\\n")
        
        f.write("\\n")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        f.write("## üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑\\n\\n")
        
        if successful_results:
            winner = successful_results[0]
            f.write(f"### üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner['description']}\\n\\n")
            f.write(f"**–ú–µ–¥–∏–∞–Ω–Ω–∞—è –ø—Ä–∏–±—ã–ª—å:** ${winner.get('median_profit', 0):.2f}\\n")
            f.write(f"**Consistency:** {winner.get('consistency', 0):.1f}%\\n")
            f.write(f"**–õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:** ${winner.get('best_median', 0):.0f}\\n")
            f.write(f"**–î–∏–∞–ø–∞–∑–æ–Ω:** ${winner.get('range_min', 0):.0f} - ${winner.get('range_max', 0):.0f}\\n")
            f.write(f"**–í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:** {winner['duration']/60:.0f} –º–∏–Ω—É—Ç\\n\\n")
        
        # Ranking –ø–æ —Ä–∞–∑–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
        f.write("### üìà –†–µ–π—Ç–∏–Ω–≥–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º\\n\\n")
        
        if len(successful_results) > 1:
            # –ü–æ –º–µ–¥–∏–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
            f.write("**–ü–æ –º–µ–¥–∏–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏:**\\n")
            for i, result in enumerate(successful_results, 1):
                f.write(f"{i}. {result['description']}: ${result.get('median_profit', 0):.0f}\\n")
            f.write("\\n")
            
            # –ü–æ consistency
            consistency_sorted = sorted(successful_results, key=lambda x: x.get('consistency', 0), reverse=True)
            f.write("**–ü–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (consistency):**\\n")
            for i, result in enumerate(consistency_sorted, 1):
                f.write(f"{i}. {result['description']}: {result.get('consistency', 0):.1f}%\\n")
            f.write("\\n")
            
            # –ü–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
            best_sorted = sorted(successful_results, key=lambda x: x.get('best_median', 0), reverse=True)
            f.write("**–ü–æ –ª—É—á—à–µ–º—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è:**\\n")
            for i, result in enumerate(best_sorted, 1):
                f.write(f"{i}. {result['description']}: ${result.get('best_median', 0):.0f}\\n")
            f.write("\\n")
        
        # –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        f.write("## üí° –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\\n\\n")
        
        if successful_results:
            best_profit = successful_results[0]
            best_consistency = max(successful_results, key=lambda x: x.get('consistency', 0))
            
            f.write(f"1. **–õ—É—á—à–∞—è –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç—å:** {best_profit['description']} (${best_profit.get('median_profit', 0):.0f})\\n")
            f.write(f"2. **–õ—É—á—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å:** {best_consistency['description']} ({best_consistency.get('consistency', 0):.1f}%)\\n")
            
            # –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä
            f.write("\\n### üèóÔ∏è –ê–Ω–∞–ª–∏–∑ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä:\\n\\n")
            
            architecture_analysis = {
                'LSTM': '–ü—Ä–æ—Å—Ç–∞—è, –±—ã—Å—Ç—Ä–∞—è, —Ö–æ—Ä–æ—à–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                'Transformer': '–ú–æ—â–Ω–∞—è, attention –º–µ—Ö–∞–Ω–∏–∑–º, –Ω–æ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å—Å—è',
                'SSM': '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞—è –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π',
                'MLP': 'Baseline, –ø—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è, –±—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ'
            }
            
            for result in successful_results:
                arch_type = None
                for arch in architecture_analysis.keys():
                    if arch in result['description'].upper():
                        arch_type = arch
                        break
                
                if arch_type:
                    f.write(f"**{arch_type}:** {architecture_analysis[arch_type]}\\n")
                    f.write(f"- –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.get('median_profit', 0):.0f} –º–µ–¥–∏–∞–Ω–∞, {result.get('consistency', 0):.1f}% consistency\\n")
                    f.write(f"- –í—Ä–µ–º—è: {result['duration']/60:.0f} –º–∏–Ω—É—Ç\\n\\n")
        
        else:
            f.write("‚ùå –í—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ª–∞–¥–∫–∞.\\n\\n")
        
        # –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫
        failed_results = [r for r in all_results if not r['success']]
        if failed_results:
            f.write("## ‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã\\n\\n")
            for result in failed_results:
                f.write(f"**{result['description']}:**\\n")
                f.write(f"- –û—à–∏–±–∫–∞: {result.get('error', 'Unknown error')}\\n")
                f.write(f"- –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: {result['duration']/60:.0f} –º–∏–Ω—É—Ç\\n\\n")
    
    return report_file

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    print("üèÜ –ó–ê–ü–£–°–ö –ë–û–õ–¨–®–û–ì–û –°–†–ê–í–ù–ï–ù–ò–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†!")
    print("üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º: LSTM, Transformer, SSM, MLP")
    print("=" * 70)
    
    # –°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    experiments = [
        ("main_v13_lstm.py", "v13_LSTM - –ü—Ä–æ—Å—Ç–∞—è LSTM –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞"),
        ("main_v14_transformer_fixed.py", "v14_Transformer_Fixed - –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä"),
        ("main_v15_ssm.py", "v15_SSM - State Space Models (Mamba)"),
        ("main_v16_mlp.py", "v16_MLP - –ì–ª—É–±–æ–∫–∏–µ MLP —Å residuals")
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    missing_scripts = []
    for script, desc in experiments:
        if not os.path.exists(script):
            missing_scripts.append(script)
    
    if missing_scripts:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–∫—Ä–∏–ø—Ç—ã: {missing_scripts}")
        print("–°–æ–∑–¥–∞–π—Ç–µ –≤—Å–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã
    all_results = []
    total_start_time = time.time()
    
    for i, (script, description) in enumerate(experiments, 1):
        print(f"\nüîÑ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç {i}/{len(experiments)}")
        result = run_experiment(script, description)
        all_results.append(result)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–º–∏
        if i < len(experiments):
            print("‚è∏Ô∏è –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–º...")
            time.sleep(30)
    
    total_end_time = time.time()
    total_duration = total_end_time - total_start_time
    
    print("\n" + "=" * 70)
    print("üèÅ –í–°–ï –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_duration/60:.0f} –º–∏–Ω—É—Ç")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report_file = create_comparison_report(all_results)
    
    print(f"\nüìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {report_file}")
    
    # –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    print("\nüèÜ –ö–†–ê–¢–ö–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    successful = [r for r in all_results if r['success']]
    
    if successful:
        successful.sort(key=lambda x: x.get('median_profit', -1000), reverse=True)
        
        print("\n–†–µ–π—Ç–∏–Ω–≥ –ø–æ –º–µ–¥–∏–∞–Ω–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏:")
        for i, result in enumerate(successful, 1):
            median = result.get('median_profit', 0)
            consistency = result.get('consistency', 0)
            name = result['description'].split(' - ')[0]
            print(f"{i}. {name}: ${median:.0f} (consistency {consistency:.1f}%)")
        
        winner = successful[0]
        print(f"\nü•á –ü–û–ë–ï–î–ò–¢–ï–õ–¨: {winner['description']}")
        print(f"   üí∞ –ú–µ–¥–∏–∞–Ω–∞: ${winner.get('median_profit', 0):.2f}")
        print(f"   üìä Consistency: {winner.get('consistency', 0):.1f}%")
        print(f"   ‚ö° –í—Ä–µ–º—è: {winner['duration']/60:.0f} –º–∏–Ω—É—Ç")
    else:
        print("‚ùå –í—Å–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ!")
    
    failed = [r for r in all_results if not r['success']]
    if failed:
        print(f"\n‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤: {len(failed)}")
        for result in failed:
            print(f"   - {result['description']}: {result.get('error', 'Unknown error')}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    with open(f"raw_results_{datetime.now().strftime('%Y%m%d_%H%M')}.json", 'w') as f:
        json.dump(all_results, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç—á–µ—Ç: {report_file}")

if __name__ == "__main__":
    main() 