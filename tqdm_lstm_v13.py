#!/usr/bin/env python3
"""
üß† LSTM v13 –° TQDM –ü–†–û–ì–†–ï–°–°-–ë–ê–†–ê–ú–ò!
üéØ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –∂–∏–≤—ã–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
"""

from src.rl.env import Env
from src.rl.agent import Agent
import numpy as np
import torch
import torch.nn as nn
from tqdm import tqdm
import time

class LSTMAgent(Agent):
    def __init__(self, obs_space, **kwargs):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º LSTM-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.lstm_hidden = kwargs.pop('lstm_hidden', 128)
        self.lstm_layers = kwargs.pop('lstm_layers', 2)
        self.fc_hidden = kwargs.pop('fc_hidden', 64)
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å
        super().__init__(obs_space, **kwargs)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –Ω–∞ LSTM
        num_features = obs_space.shape[1] if len(obs_space.shape) == 3 else obs_space.shape[0]
        
        self.lstm = nn.LSTM(
            input_size=num_features,
            hidden_size=self.lstm_hidden,
            num_layers=self.lstm_layers,
            batch_first=True,
            dropout=0.1 if self.lstm_layers > 1 else 0
        )
        
        self.fc1 = nn.Linear(self.lstm_hidden, self.fc_hidden)
        self.fc2 = nn.Linear(self.fc_hidden, 32)
        self.fc3 = nn.Linear(32, 3)
        self.dropout = nn.Dropout(0.1)
        
        print(f"üß† LSTM –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:")
        print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: LSTM({self.lstm_hidden}) x {self.lstm_layers}")
        print(f"   FC: {self.fc_hidden} -> 32 -> 3")

def main():
    print("üß† LSTM v13 –° –ñ–ò–í–´–ú TQDM –ü–†–û–ì–†–ï–°–°–û–ú!")
    print("üéØ –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞!")
    print("=" * 60)
    
    # LSTM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = {
        'episodes': 200,
        'trading_period': 90,
        'window': 40,
        'commission': 0.0002,
        
        # LSTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        'lstm_hidden': 128,
        'lstm_layers': 2,
        'fc_hidden': 64,
        'dropout': 0.1,
        'lr': 0.001,
        'epsilon': 0.05,        # –ù–ò–ó–ö–ò–ô —Å—Ç–∞—Ä—Ç–æ–≤—ã–π epsilon!
        'epsilon_min': 0.001,   # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π –º–∏–Ω–∏–º—É–º
        'epsilon_decay': 0.999, # –ú–µ–¥–ª–µ–Ω–Ω—ã–π —Å–ø–∞–¥
        'gamma': 0.95,
        'memory_size': 10000,
        'batch_size': 256,
        'update_freq': 5
    }
    
    print(f"üìä LSTM –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['episodes']} —ç–ø–∏–∑–æ–¥–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
    train_env = Env(
        csv_paths=["GOOG_2010-2024-06.csv"],
        fee=config['commission'],
        trading_period=config['trading_period'],
        window=config['window']
    )
    
    oos_env = Env(
        csv_paths=["GOOG_2024-07_2025-04.csv"],  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ OOS –¥–∞–Ω–Ω—ã–µ!
        fee=config['commission'],
        trading_period=config['trading_period'],
        window=config['window']
    )
    
    print(f"üìä –î–ê–ù–ù–´–ï –ó–ê–ì–†–£–ñ–ï–ù–´:")
    print(f"   üéØ Train: 2010-2024 –¥–∞–Ω–Ω—ã–µ, shape: {train_env.stock.obs_space.shape}")
    print(f"   üß™ OOS: 2024-07_2025-04 –¥–∞–Ω–Ω—ã–µ, shape: {oos_env.stock.obs_space.shape}")
    print(f"   üìè Trading period: {config['trading_period']} –¥–Ω–µ–π")
    print(f"   ü™ü Window: {config['window']} –¥–Ω–µ–π")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º LSTM –∞–≥–µ–Ω—Ç–∞
    agent = LSTMAgent(
        obs_space=train_env.stock.obs_space,
        **{k: v for k, v in config.items() 
           if k not in ['episodes', 'trading_period', 'window', 'commission']}
    )
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–∞–º—è—Ç—å
    print("üß† –ó–∞–ø–æ–ª–Ω—è–µ–º LSTM –ø–∞–º—è—Ç—å...")
    state = train_env.reset()
    for _ in range(1000):
        action = np.random.randint(3)
        next_state, _, reward, done = train_env.step(action)
        agent.remember(state, action, reward, next_state, done)
        state = next_state
        if done:
            state = train_env.reset()
    
    print("üèÉ LSTM –æ–±—É—á–µ–Ω–∏–µ —Å –ñ–ò–í–´–ú –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º...")
    print("üìà –ö–∞–∂–¥—É—é —ç–ø–æ—Ö—É: OOS —Ç–µ—Å—Ç")
    print("üìä –ö–∞–∂–¥—ã–µ 10 —ç–ø–æ—Ö: –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç")
    print("=" * 60)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è —Å TQDM
    best_median = -float('inf')
    
    with tqdm(range(config['episodes']), desc="üß† LSTM", 
              bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}, {rate_fmt}]') as pbar:
        
        for episode in pbar:
            # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
            state = train_env.reset()
            done = False
            total_reward = 0
            
            while not done:
                action = agent.act(state)
                next_state, _, reward, done = train_env.step(action)
                agent.remember(state, action, reward, next_state, done)
                agent.update()
                total_reward += reward
                state = next_state
            
            train_profit = train_env.current_equity - train_env.initial_capital
            
            # OOS —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ê–ñ–î–£–Æ —ç–ø–æ—Ö—É
            oos_profits = []
            for start_pos in range(0, min(20, len(oos_env.stock.closes) - config['trading_period'] - config['window']), 5):
                state = oos_env.reset_fixed(start_pos)
                done = False
                
                while not done:
                    action = agent.act(state, training=False)
                    next_state, _, reward, done = oos_env.step(action)
                    state = next_state
                
                oos_profits.append(oos_env.current_equity - oos_env.initial_capital)
            
            oos_median = np.median(oos_profits)
            
            if oos_median > best_median:
                best_median = oos_median
                agent.save(f"models/tqdm-lstm-v13_best")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            pbar.set_postfix({
                'Train': f'${train_profit:.0f}',
                'OOS_Med': f'${oos_median:.0f}',
                'Best': f'${best_median:.0f}',
                'Œµ': f'{agent.epsilon:.3f}',
                'Trades': f'{train_env.trade_count}'
            })
            
            # –û–¢–ß–ï–¢ –ö–ê–ñ–î–´–ï 10 –≠–ü–û–•
            if (episode + 1) % 10 == 0:
                print(f"\nüìä –≠–ü–û–•–ê {episode + 1}/{config['episodes']} –û–¢–ß–ï–¢:")
                print(f"   üí∞ Train profit: ${train_profit:.2f}")
                print(f"   üß™ OOS median: ${oos_median:.2f}")
                print(f"   üèÜ Best OOS: ${best_median:.2f}")
                print(f"   üìà Epsilon: {agent.epsilon:.4f}")
                print(f"   üîÑ Trades: {train_env.trade_count}")
                print(f"   üìä OOS range: ${min(oos_profits):.0f} to ${max(oos_profits):.0f}")
            
            time.sleep(0.05)  # –ß—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
    
    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("\nüî¨ LSTM —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    final_profits = []
    
    with tqdm(range(0, min(100, len(oos_env.stock.closes) - config['trading_period'] - config['window']), 5),
              desc="üß™ LSTM —Ç–µ—Å—Ç",
              bar_format='{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]') as test_bar:
        
        for start_pos in test_bar:
            state = oos_env.reset_fixed(start_pos)
            done = False
            
            while not done:
                action = agent.act(state, training=False)
                next_state, _, reward, done = oos_env.step(action)
                state = next_state
            
            profit = oos_env.current_equity - oos_env.initial_capital
            final_profits.append(profit)
            
            test_bar.set_postfix({
                'Profit': f'${profit:.0f}',
                'Avg': f'${np.mean(final_profits):.0f}'
            })
    
    # LSTM —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    median_profit = np.median(final_profits)
    mean_profit = np.mean(final_profits)
    consistency = len([p for p in final_profits if p > 0]) / len(final_profits) * 100
    
    print(f"\nüß† LSTM v13 –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"   üí∞ –ú–µ–¥–∏–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏—Ç: ${median_profit:.2f}")
    print(f"   üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ–∏—Ç: ${mean_profit:.2f}")  
    print(f"   üéØ Consistency: {consistency:.1f}%")
    print(f"   üèÜ –õ—É—á—à–∏–π –º–µ–¥–∏–∞–Ω–Ω—ã–π: ${best_median:.2f}")
    print(f"   üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(final_profits)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
    agent.save("models/tqdm-lstm-v13")
    print(f"üíæ LSTM –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: models/tqdm-lstm-v13")
    
    print("üß† LSTM v13 –ó–ê–í–ï–†–®–ï–ù!")
    
    return {
        'name': 'LSTM v13',
        'median_profit': median_profit,
        'mean_profit': mean_profit,
        'consistency': consistency,
        'best_median': best_median,
        'total_tests': len(final_profits)
    }

if __name__ == "__main__":
    main() 