"""
–ë–∞—Ç—á-—Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–µ—Ä—Å–∏–π —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –ø–æ–¥—Ä—è–¥
"""
import subprocess
import os
import time
import pandas as pd
from datetime import datetime


def run_version(script_name, version_name):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ—Ä—Å–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    print(f"\n{'='*60}")
    print(f"üöÄ –ó–ê–ü–£–°–ö: {version_name}")
    print(f"üìú –°–∫—Ä–∏–ø—Ç: {script_name}")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    print(f"{'='*60}")
    
    start_time = time.time()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        result = subprocess.run(['python', script_name], 
                              capture_output=True, 
                              text=True, 
                              timeout=3600)  # 1 —á–∞—Å —Ç–∞–π–º–∞—É—Ç
        
        end_time = time.time()
        duration = end_time - start_time
        
        print(f"\n‚úÖ {version_name} –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration/60:.1f} –º–∏–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—Ö
        if result.returncode == 0:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {version_name}")
            return {'success': True, 'duration': duration, 'output': result.stdout}
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {version_name}: {result.stderr}")
            return {'success': False, 'duration': duration, 'error': result.stderr}
            
    except subprocess.TimeoutExpired:
        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç {version_name} (>1 —á–∞—Å)")
        return {'success': False, 'duration': 3600, 'error': 'Timeout'}
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ {version_name}: {e}")
        return {'success': False, 'duration': 0, 'error': str(e)}


def analyze_results():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π"""
    print(f"\n{'='*80}")
    print("üìä –°–†–ê–í–ù–ò–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –í–°–ï–• –í–ï–†–°–ò–ô")
    print(f"{'='*80}")
    
    versions = [
        ('v11', 'models/google-trading-v11-honest.log'),
        ('v12', 'models/google-trading-v12-ultra-stable.log')
    ]
    
    results_summary = []
    
    for version_name, log_file in versions:
        if os.path.exists(log_file):
            try:
                df = pd.read_csv(log_file)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                final_episode = df.iloc[-1]
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                summary = {
                    'version': version_name,
                    'episodes': len(df),
                    'final_median_profit': final_episode['oos_profit_median'],
                    'final_consistency': final_episode['oos_consistency'],
                    'final_epsilon': final_episode['epsilon'],
                    'best_median_profit': df['oos_profit_median'].max(),
                    'best_consistency': df['oos_consistency'].max(),
                    'avg_consistency': df['oos_consistency'].mean(),
                    'consistency_std': df['oos_consistency'].std()
                }
                
                results_summary.append(summary)
                
                print(f"\nüîç {version_name.upper()} –ê–ù–ê–õ–ò–ó:")
                print(f"   –≠–ø–∏–∑–æ–¥–æ–≤: {summary['episodes']}")
                print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –º–µ–¥–∏–∞–Ω–Ω—ã–π OOS: ${summary['final_median_profit']:.0f}")
                print(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è consistency: {summary['final_consistency']*100:.1f}%")
                print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π epsilon: {summary['final_epsilon']:.3f}")
                print(f"   –õ—É—á—à–∏–π –º–µ–¥–∏–∞–Ω–Ω—ã–π OOS: ${summary['best_median_profit']:.0f}")
                print(f"   –õ—É—á—à–∞—è consistency: {summary['best_consistency']*100:.1f}%")
                print(f"   –°—Ä–µ–¥–Ω—è—è consistency: {summary['avg_consistency']*100:.1f}%")
                print(f"   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (std): {summary['consistency_std']*100:.1f}%")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {version_name}: {e}")
        else:
            print(f"‚ö†Ô∏è –õ–æ–≥ {version_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {log_file}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
    if len(results_summary) >= 2:
        print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô:")
        print("-" * 50)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ consistency
        sorted_by_consistency = sorted(results_summary, 
                                     key=lambda x: x['avg_consistency'], 
                                     reverse=True)
        
        print("üìä –ü–æ —Å—Ä–µ–¥–Ω–µ–π consistency:")
        for i, result in enumerate(sorted_by_consistency):
            icon = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â"
            print(f"   {icon} {result['version']}: {result['avg_consistency']*100:.1f}%")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–±—ã–ª–∏
        sorted_by_profit = sorted(results_summary, 
                                key=lambda x: x['best_median_profit'], 
                                reverse=True)
        
        print("\nüí∞ –ü–æ –ª—É—á—à–µ–º—É –º–µ–¥–∏–∞–Ω–Ω–æ–º—É –ø—Ä–æ—Ñ–∏—Ç—É:")
        for i, result in enumerate(sorted_by_profit):
            icon = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â"
            print(f"   {icon} {result['version']}: ${result['best_median_profit']:.0f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        best_consistency = sorted_by_consistency[0]
        best_profit = sorted_by_profit[0]
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if best_consistency['version'] == best_profit['version']:
            print(f"   üéØ {best_consistency['version']} - –ª—É—á—à–∏–π –≤–æ –≤—Å—ë–º!")
        else:
            print(f"   üîí {best_consistency['version']} - –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏")
            print(f"   üí∞ {best_profit['version']} - –¥–ª—è –ø—Ä–∏–±—ã–ª–∏")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–∞—Ç—á-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üî¨ –ë–ê–¢–ß-–°–†–ê–í–ù–ï–ù–ò–ï –í–ï–†–°–ò–ô –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    print(f"‚è∞ –°—Ç–∞—Ä—Ç: {datetime.now().strftime('%H:%M:%S')}")
    
    # –°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    versions_to_test = [
        ('main_v12_ultra_stable.py', 'v12 Ultra-Stable'),
        # –î–æ–±–∞–≤–∏–º –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏ –ø–æ –º–µ—Ä–µ —Å–æ–∑–¥–∞–Ω–∏—è
    ]
    
    results = {}
    total_start = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Ä—Å–∏–∏ –ø–æ–¥—Ä—è–¥
    for script, name in versions_to_test:
        if os.path.exists(script):
            results[name] = run_version(script, name)
        else:
            print(f"‚ö†Ô∏è –°–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {script}")
            results[name] = {'success': False, 'error': 'Script not found'}
    
    total_time = time.time() - total_start
    
    # –°–≤–æ–¥–∫–∞ –∑–∞–ø—É—Å–∫–æ–≤
    print(f"\n{'='*80}")
    print("üìã –°–í–û–î–ö–ê –ó–ê–ü–£–°–ö–û–í")
    print(f"{'='*80}")
    print(f"‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_time/60:.1f} –º–∏–Ω")
    
    successful = sum(1 for r in results.values() if r['success'])
    total = len(results)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}/{total}")
    
    for name, result in results.items():
        status = "‚úÖ" if result['success'] else "‚ùå"
        duration = result.get('duration', 0) / 60
        print(f"   {status} {name}: {duration:.1f} –º–∏–Ω")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_results()
    
    print(f"\nüéâ –ë–ê–¢–ß-–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")


if __name__ == "__main__":
    main() 