#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ v11 –º–æ–¥–µ–ª–∏ –Ω–∞ –†–ê–ó–ù–´–• OOS –ø–µ—Ä–∏–æ–¥–∞—Ö
–¶–µ–ª—å: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å–ª—É—á–∞–π–Ω—ã–µ –ª–∏ —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã $3065
"""

import torch
import numpy as np
import pandas as pd
from src.rl.env import Env
from src.rl.agent import Agent
import os

def test_model_on_different_oos():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ —Ä–∞–∑–Ω—ã—Ö OOS –ø–µ—Ä–∏–æ–¥–∞—Ö"""
    
    print("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï v11 –Ω–∞ –†–ê–ó–ù–´–• OOS –ø–µ—Ä–∏–æ–¥–∞—Ö!")
    print("üéØ –¶–ï–õ–¨: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –ª–∏ $3065 —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
    print("="*70)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ CSV —Ñ–∞–π–ª—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤
    test_files = [
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ
        {"name": "–û—Ä–∏–≥–∏–Ω–∞–ª OOS 2024-07 –¥–æ 2025-04", "file": "GOOG_2024-07_2025-04.csv"},
        
        # –¢–µ—Å—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ OOS)
        {"name": "Train –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ OOS 2010-2024-06", "file": "GOOG_2010-2024-06.csv"},
    ]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å v11
    model_path = "models/google-trading-v11-honest_best"
    
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return
    
    results = []
    
    for test_case in test_files:
        print(f"\nüß™ –¢–ï–°–¢: {test_case['name']}")
        print(f"üìÅ –§–∞–π–ª: {test_case['file']}")
        
        try:
            if not os.path.exists(test_case['file']):
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_case['file']}")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è OOS —Ç–µ—Å—Ç–∞
            env = Env(
                csv_paths=[test_case['file']], 
                fee=0.0002, 
                trading_period=120, 
                window=50
            )
            
            print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(env.stock.closes)} —Å—Ç—Ä–æ–∫")
            
            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Ç–æ–π –∂–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π —á—Ç–æ –≤ v11
            agent = Agent(obs_space=env.stock.obs_space)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–µ—Å–∞
            agent.load(model_path)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞ 15 —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∞—Ä—Ç–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
            profits = []
            trades_list = []
            win_rates = []
            
            max_start_pos = len(env.stock.closes) - 120 - 50  # –æ–∫–Ω–æ + –ø–µ—Ä–∏–æ–¥
            step_size = max(1, max_start_pos // 15)  # 15 —Ç–µ—Å—Ç–æ–≤ –º–∞–∫—Å–∏–º—É–º
            
            test_positions = []
            for i in range(0, min(max_start_pos, 150), max(step_size, 10)):
                test_positions.append(i)
            
            print(f"üìä –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∑–∏—Ü–∏–∏: {test_positions[:5]}...{test_positions[-5:] if len(test_positions) > 5 else ''}")
            
            for i, start_pos in enumerate(test_positions[:15]):
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—É –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                state = env.reset_fixed(start_position=start_pos)
                
                episode_trades = 0
                episode_wins = 0
                
                while env.ind < env.end:
                    # –î–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è (epsilon=0)
                    action = agent.act(state, training=False)
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                    next_state, reward, done, _ = env.step(action)
                    
                    if action != 0:  # –ï—Å–ª–∏ –±—ã–ª–∞ —Ç–æ—Ä–≥–æ–≤–ª—è
                        episode_trades += 1
                        if reward > 0:
                            episode_wins += 1
                    
                    state = next_state
                    
                    if done or env.ind >= env.end:
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —ç–ø–∏–∑–æ–¥–∞
                metrics = env.get_trading_metrics()
                profit = metrics['total_profit_dollars']
                
                profits.append(profit)
                trades_list.append(episode_trades)
                
                win_rate = episode_wins / max(episode_trades, 1)
                win_rates.append(win_rate)
                
                if i % 3 == 0:  # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 3 —Ç–µ—Å—Ç–∞
                    print(f"  –¢–µ—Å—Ç {i+1}/15: start={start_pos}, profit=${profit:.0f}, trades={episode_trades}")
                
                if len(profits) >= 15:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 15 —Ç–µ—Å—Ç–∞–º–∏
                    break
            
            if profits:
                median_profit = np.median(profits)
                mean_profit = np.mean(profits)
                std_profit = np.std(profits)
                positive_rate = (np.array(profits) > 0).mean() * 100
                avg_trades = np.mean(trades_list)
                avg_win_rate = np.mean(win_rates)
                
                print(f"üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ({len(profits)} —Ç–µ—Å—Ç–æ–≤):")
                print(f"   –ú–µ–¥–∏–∞–Ω–∞: ${median_profit:.0f}")
                print(f"   –°—Ä–µ–¥–Ω–µ–µ: ${mean_profit:.0f}")
                print(f"   –°—Ç–∞–Ω–¥–∞—Ä—Ç. –æ—Ç–∫–ª.: ${std_profit:.0f}")
                print(f"   –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {positive_rate:.1f}%")
                print(f"   –î–∏–∞–ø–∞–∑–æ–Ω: ${min(profits):.0f} - ${max(profits):.0f}")
                print(f"   –°–¥–µ–ª–æ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º: {avg_trades:.1f}")
                print(f"   Win rate: {avg_win_rate*100:.1f}%")
                
                results.append({
                    'test_name': test_case['name'],
                    'file': test_case['file'],
                    'data_points': len(env.stock.closes),
                    'tests_count': len(profits),
                    'median_profit': median_profit,
                    'mean_profit': mean_profit,
                    'std_profit': std_profit,
                    'positive_rate': positive_rate,
                    'min_profit': min(profits),
                    'max_profit': max(profits),
                    'avg_trades': avg_trades,
                    'avg_win_rate': avg_win_rate,
                    'all_profits': profits
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {test_case['name']}: {e}")
            import traceback
            traceback.print_exc()
            continue
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    print("\n" + "="*70)
    print("üìà –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
    print("="*70)
    
    if results:
        df = pd.DataFrame(results)
        
        print(f"\nüéØ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(results)} –ø–µ—Ä–∏–æ–¥–æ–≤")
        print(f"üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –°—Ä–µ–¥–Ω—è—è –º–µ–¥–∏–∞–Ω–∞: ${df['median_profit'].mean():.0f}")
        print(f"   –ú–µ–¥–∏–∞–Ω–∞ –º–µ–¥–∏–∞–Ω: ${df['median_profit'].median():.0f}")
        print(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${df['median_profit'].max():.0f}")
        print(f"   –•—É–¥—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${df['median_profit'].min():.0f}")
        print(f"   –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {(df['median_profit'] > 0).mean() * 100:.1f}% –ø–µ—Ä–∏–æ–¥–æ–≤ –ø—Ä–∏–±—ã–ª—å–Ω—ã")
        
        # –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüèÜ –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        for i, row in df.iterrows():
            print(f"   {row['test_name']}: ${row['median_profit']:.0f}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        original = df[df['test_name'].str.contains('–û—Ä–∏–≥–∏–Ω–∞–ª')]
        if len(original) > 0:
            orig_median = original.iloc[0]['median_profit']
            print(f"\nüéØ –ê–ù–ê–õ–ò–ó –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ($3065 –æ–∂–∏–¥–∞–ª—Å—è):")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º OOS: ${orig_median:.0f}")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            train_test = df[df['test_name'].str.contains('Train')]
            if len(train_test) > 0:
                train_median = train_test.iloc[0]['median_profit']
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${train_median:.0f}")
                
                if orig_median > train_median:
                    print(f"   ‚úÖ OOS –ª—É—á—à–µ train –¥–∞–Ω–Ω—ã—Ö - —Ö–æ—Ä–æ—à–∏–π –∑–Ω–∞–∫!")
                else:
                    print(f"   ‚ö†Ô∏è OOS —Ö—É–∂–µ train - –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")
                    
                if orig_median >= 1000:
                    print(f"   üí∞ –û–¢–õ–ò–ß–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –±–æ–ª–µ–µ $1000!")
                elif orig_median >= 500:
                    print(f"   üëç –•–û–†–û–®–ò–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –±–æ–ª–µ–µ $500")
                elif orig_median >= 100:
                    print(f"   ü§î –£–ú–ï–†–ï–ù–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –±–æ–ª–µ–µ $100")
                else:
                    print(f"   ‚ùå –ü–õ–û–•–û–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –º–µ–Ω–µ–µ $100")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        with open("oos_variation_test_results.txt", "w", encoding='utf-8') as f:
            f.write("üî¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï v11 –ù–ê –†–ê–ó–ù–´–• OOS –ü–ï–†–ò–û–î–ê–•\n")
            f.write("="*70 + "\n\n")
            
            for result in results:
                f.write(f"–¢–µ—Å—Ç: {result['test_name']}\n")
                f.write(f"–§–∞–π–ª: {result['file']}\n")
                f.write(f"–î–∞–Ω–Ω—ã—Ö: {result['data_points']}, –¢–µ—Å—Ç–æ–≤: {result['tests_count']}\n")
                f.write(f"–ú–µ–¥–∏–∞–Ω–∞: ${result['median_profit']:.0f}\n")
                f.write(f"–°—Ä–µ–¥–Ω–µ–µ: ${result['mean_profit']:.0f}\n")
                f.write(f"–î–∏–∞–ø–∞–∑–æ–Ω: ${result['min_profit']:.0f} - ${result['max_profit']:.0f}\n")
                f.write(f"–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {result['positive_rate']:.1f}%\n")
                f.write(f"–°–¥–µ–ª–æ–∫: {result['avg_trades']:.1f}, Win rate: {result['avg_win_rate']*100:.1f}%\n")
                f.write(f"–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {result['all_profits']}\n")
                f.write("-"*50 + "\n")
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: oos_variation_test_results.txt")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞!")

if __name__ == "__main__":
    test_model_on_different_oos() 